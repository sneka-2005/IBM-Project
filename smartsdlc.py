# -*- coding: utf-8 -*-
"""smartSDLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lcROurpXCWWV_-SfWplgk5TXoHFlyTuE
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import datetime

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Store history
history = {"analysis": [], "code": []}

def generate_response(prompt, max_length=1024, temperature=0.7):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=temperature,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

def requirement_analysis(pdf_file, prompt_text, max_len, temp):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        analysis_prompt = f"Analyze the following document and extract key software requirements. Organize them into functional requirements, non-functional requirements, and technical specifications:\n\n{content}"
    else:
        analysis_prompt = f"Analyze the following requirements and organize them into functional requirements, non-functional requirements, and technical specifications:\n\n{prompt_text}"

    result = generate_response(analysis_prompt, max_length=max_len, temperature=temp)
    history["analysis"].append(result)
    return result

def code_generation(prompt, language, max_len, temp):
    code_prompt = f"Generate {language} code for the following requirement:\n\n{prompt}\n\nCode:"
    result = generate_response(code_prompt, max_length=max_len, temperature=temp)
    history["code"].append(result)
    return result

# ‚úÖ Fixed: prepare downloadable file
def download_history():
    content = "=== Requirement Analysis History ===\n"
    content += "\n\n".join(history["analysis"])
    content += "\n\n=== Code Generation History ===\n"
    content += "\n\n".join(history["code"])
    filename = f"history_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(filename, "w") as f:
        f.write(content)
    return filename  # Return file path

# Gradio App
with gr.Blocks(theme="soft") as app:
    gr.Markdown("# ü§ñ AI Code Analysis & Generator")

    with gr.Accordion("‚öôÔ∏è Model Settings", open=False):
        max_len = gr.Slider(256, 2048, value=1024, step=64, label="Max Output Length")
        temp = gr.Slider(0.1, 1.5, value=0.7, step=0.1, label="Creativity (Temperature)")

    with gr.Tabs():
        with gr.TabItem("üìä Code Analysis"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload PDF", file_types=[".pdf"])
                    prompt_input = gr.Textbox(
                        label="Or write requirements here",
                        placeholder="Describe your software requirements...",
                        lines=5
                    )
                    analyze_btn = gr.Button("Analyze")
                    clear_btn1 = gr.Button("Clear")
                with gr.Column():
                    analysis_output = gr.Textbox(label="Requirements Analysis", lines=20)

            analyze_btn.click(requirement_analysis,
                              inputs=[pdf_upload, prompt_input, max_len, temp],
                              outputs=analysis_output)
            clear_btn1.click(lambda: "", outputs=analysis_output)

        with gr.TabItem("üíª Code Generation"):
            with gr.Row():
                with gr.Column():
                    code_prompt = gr.Textbox(
                        label="Code Requirements",
                        placeholder="Describe what code you want to generate...",
                        lines=5
                    )
                    language_dropdown = gr.Dropdown(
                        choices=["Python", "JavaScript", "Java", "C++", "C#", "PHP", "Go", "Rust"],
                        label="Programming Language",
                        value="Python"
                    )
                    generate_btn = gr.Button("Generate Code")
                    clear_btn2 = gr.Button("Clear")
                with gr.Column():
                    code_output = gr.Code(label="Generated Code", language="python")

            generate_btn.click(code_generation,
                               inputs=[code_prompt, language_dropdown, max_len, temp],
                               outputs=code_output)
            clear_btn2.click(lambda: "", outputs=code_output)

    with gr.Row():
        download_btn = gr.DownloadButton("‚¨áÔ∏è Download History")
        download_btn.click(download_history, inputs=None, outputs=download_btn)

app.launch(share=True)